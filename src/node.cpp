// This file is autogenerated. Do not modify.

#ifndef BUILD_NODEJS
#error "This file only works in Node builds"
#endif // BUILD_NODEJS

#include <napi.h>

#include "exception.h"
#include "parser.h"
#include "response.h"
#include "result.h"
#include "run.h"
#include "vector.h"

namespace ticket::command {

inline auto isNullish (Napi::Value value) -> bool {
  return value.IsNull() || value.IsUndefined();
}

template <typename Cmd>
inline auto handleCommand (Napi::Env env, const Cmd &cmd)
  -> Napi::Value {
  try {
    auto resp = run(cmd);
    if (auto err = resp.error()) {
      auto error = Napi::Error::New(env, err->what());
      error.ThrowAsJavaScriptException();
      return {};
    }
    Napi::Value res;
    resp.result().visit([&env, &res] (const auto &resp) {
      res = response::toJsObject(env, resp);
    });

    return res;
  } catch (const Exception &e) {
    auto error = Napi::Error::New(env, e.what());
    error.ThrowAsJavaScriptException();
    return {};
  }
}

#define CPP_STR(x) ((x).As<Napi::String>().Utf8Value())
#define CPP_INT(x) ((x).As<Napi::Number>().Int32Value())
#define CPP_BOOL(x) ((x).As<Napi::Boolean>().Value())

auto nodeAddUser (const Napi::CallbackInfo &info)
  -> Napi::Value {
  AddUser cmd;
  auto args = info[0].ToObject();
  cmd.currentUser = CPP_STR(args.Get("currentUser"));
  cmd.username = CPP_STR(args.Get("username"));
  cmd.password = CPP_STR(args.Get("password"));
  cmd.name = CPP_STR(args.Get("name"));
  cmd.email = CPP_STR(args.Get("email"));
  cmd.privilege = CPP_INT(args.Get("privilege"));
  return handleCommand(info.Env(), cmd);
}

auto nodeLogin (const Napi::CallbackInfo &info)
  -> Napi::Value {
  Login cmd;
  auto args = info[0].ToObject();
  cmd.username = CPP_STR(args.Get("username"));
  cmd.password = CPP_STR(args.Get("password"));
  return handleCommand(info.Env(), cmd);
}

auto nodeLogout (const Napi::CallbackInfo &info)
  -> Napi::Value {
  Logout cmd;
  auto args = info[0].ToObject();
  cmd.username = CPP_STR(args.Get("username"));
  return handleCommand(info.Env(), cmd);
}

auto nodeQueryProfile (const Napi::CallbackInfo &info)
  -> Napi::Value {
  QueryProfile cmd;
  auto args = info[0].ToObject();
  cmd.currentUser = CPP_STR(args.Get("currentUser"));
  cmd.username = CPP_STR(args.Get("username"));
  return handleCommand(info.Env(), cmd);
}

auto nodeModifyProfile (const Napi::CallbackInfo &info)
  -> Napi::Value {
  ModifyProfile cmd;
  auto args = info[0].ToObject();
  cmd.currentUser = CPP_STR(args.Get("currentUser"));
  cmd.username = CPP_STR(args.Get("username"));
  if (!isNullish(args.Get("password"))) cmd.password = CPP_STR(args.Get("password"));
  if (!isNullish(args.Get("name"))) cmd.name = CPP_STR(args.Get("name"));
  if (!isNullish(args.Get("email"))) cmd.email = CPP_STR(args.Get("email"));
  if (!isNullish(args.Get("privilege"))) cmd.privilege = CPP_INT(args.Get("privilege"));
  return handleCommand(info.Env(), cmd);
}

auto nodeAddTrain (const Napi::CallbackInfo &info)
  -> Napi::Value {
  AddTrain cmd;
  auto args = info[0].ToObject();
  cmd.id = CPP_STR(args.Get("id"));
  cmd.stops = CPP_INT(args.Get("stops"));
  cmd.seats = CPP_INT(args.Get("seats"));
  {
    auto array = args.Get("stations").As<Napi::Array>();
    cmd.stations.reserve(array.Length());
    for (int i = 0; i < array.Length(); ++i) {
      cmd.stations.push_back(CPP_STR(array.Get(i)));
    }
  }
  {
    auto array = args.Get("prices").As<Napi::Array>();
    cmd.prices.reserve(array.Length());
    for (int i = 0; i < array.Length(); ++i) {
      cmd.prices.push_back(CPP_INT(array.Get(i)));
    }
  }
  cmd.departure = Instant(CPP_STR(args.Get("departure")).data());
  {
    auto array = args.Get("durations").As<Napi::Array>();
    cmd.durations.reserve(array.Length());
    for (int i = 0; i < array.Length(); ++i) {
      cmd.durations.push_back(Duration(CPP_INT(array.Get(i))));
    }
  }
  {
    auto array = args.Get("stopoverTimes").As<Napi::Array>();
    cmd.stopoverTimes.reserve(array.Length());
    for (int i = 0; i < array.Length(); ++i) {
      cmd.stopoverTimes.push_back(Duration(CPP_INT(array.Get(i))));
    }
  }
  {
    auto array = args.Get("dates").As<Napi::Array>();
    cmd.dates.reserve(array.Length());
    for (int i = 0; i < array.Length(); ++i) {
      cmd.dates.push_back(Date(CPP_STR(array.Get(i)).data()));
    }
  }
  cmd.type = CPP_STR(args.Get("type"))[0];
  return handleCommand(info.Env(), cmd);
}

auto nodeDeleteTrain (const Napi::CallbackInfo &info)
  -> Napi::Value {
  DeleteTrain cmd;
  auto args = info[0].ToObject();
  cmd.id = CPP_STR(args.Get("id"));
  return handleCommand(info.Env(), cmd);
}

auto nodeReleaseTrain (const Napi::CallbackInfo &info)
  -> Napi::Value {
  ReleaseTrain cmd;
  auto args = info[0].ToObject();
  cmd.id = CPP_STR(args.Get("id"));
  return handleCommand(info.Env(), cmd);
}

auto nodeQueryTrain (const Napi::CallbackInfo &info)
  -> Napi::Value {
  QueryTrain cmd;
  auto args = info[0].ToObject();
  cmd.id = CPP_STR(args.Get("id"));
  cmd.date = Date(CPP_STR(args.Get("date")).data());
  return handleCommand(info.Env(), cmd);
}

auto nodeQueryTicket (const Napi::CallbackInfo &info)
  -> Napi::Value {
  QueryTicket cmd;
  auto args = info[0].ToObject();
  cmd.from = CPP_STR(args.Get("from"));
  cmd.to = CPP_STR(args.Get("to"));
  cmd.date = Date(CPP_STR(args.Get("date")).data());
  if (!isNullish(args.Get("sort"))) cmd.sort = CPP_STR(args.Get("sort"))[0] == 't' ? kTime : kCost;
  return handleCommand(info.Env(), cmd);
}

auto nodeQueryTransfer (const Napi::CallbackInfo &info)
  -> Napi::Value {
  QueryTransfer cmd;
  auto args = info[0].ToObject();
  cmd.from = CPP_STR(args.Get("from"));
  cmd.to = CPP_STR(args.Get("to"));
  cmd.date = Date(CPP_STR(args.Get("date")).data());
  if (!isNullish(args.Get("sort"))) cmd.sort = CPP_STR(args.Get("sort"))[0] == 't' ? kTime : kCost;
  return handleCommand(info.Env(), cmd);
}

auto nodeBuyTicket (const Napi::CallbackInfo &info)
  -> Napi::Value {
  BuyTicket cmd;
  auto args = info[0].ToObject();
  cmd.currentUser = CPP_STR(args.Get("currentUser"));
  cmd.train = CPP_STR(args.Get("train"));
  cmd.date = Date(CPP_STR(args.Get("date")).data());
  cmd.seats = CPP_INT(args.Get("seats"));
  cmd.from = CPP_STR(args.Get("from"));
  cmd.to = CPP_STR(args.Get("to"));
  if (!isNullish(args.Get("queue"))) cmd.queue = CPP_BOOL(args.Get("queue"));
  return handleCommand(info.Env(), cmd);
}

auto nodeQueryOrder (const Napi::CallbackInfo &info)
  -> Napi::Value {
  QueryOrder cmd;
  auto args = info[0].ToObject();
  cmd.currentUser = CPP_STR(args.Get("currentUser"));
  return handleCommand(info.Env(), cmd);
}

auto nodeRefundTicket (const Napi::CallbackInfo &info)
  -> Napi::Value {
  RefundTicket cmd;
  auto args = info[0].ToObject();
  cmd.currentUser = CPP_STR(args.Get("currentUser"));
  if (!isNullish(args.Get("index"))) cmd.index = CPP_INT(args.Get("index"));
  return handleCommand(info.Env(), cmd);
}

auto nodeRollback (const Napi::CallbackInfo &info)
  -> Napi::Value {
  Rollback cmd;
  auto args = info[0].ToObject();
  cmd.timestamp = CPP_INT(args.Get("timestamp"));
  return handleCommand(info.Env(), cmd);
}

auto nodeClean (const Napi::CallbackInfo &info)
  -> Napi::Value {
  Clean cmd;
  return handleCommand(info.Env(), cmd);
}

auto nodeExit (const Napi::CallbackInfo &info)
  -> Napi::Value {
  Exit cmd;
  return handleCommand(info.Env(), cmd);
}

#undef CPP_STR
#undef CPP_INT
#undef CPP_BOOL

auto init (Napi::Env env, Napi::Object exports)
 -> Napi::Object {
  exports["addUser"] = Napi::Function::New(env, nodeAddUser);
  exports["login"] = Napi::Function::New(env, nodeLogin);
  exports["logout"] = Napi::Function::New(env, nodeLogout);
  exports["queryProfile"] = Napi::Function::New(env, nodeQueryProfile);
  exports["modifyProfile"] = Napi::Function::New(env, nodeModifyProfile);
  exports["addTrain"] = Napi::Function::New(env, nodeAddTrain);
  exports["deleteTrain"] = Napi::Function::New(env, nodeDeleteTrain);
  exports["releaseTrain"] = Napi::Function::New(env, nodeReleaseTrain);
  exports["queryTrain"] = Napi::Function::New(env, nodeQueryTrain);
  exports["queryTicket"] = Napi::Function::New(env, nodeQueryTicket);
  exports["queryTransfer"] = Napi::Function::New(env, nodeQueryTransfer);
  exports["buyTicket"] = Napi::Function::New(env, nodeBuyTicket);
  exports["queryOrder"] = Napi::Function::New(env, nodeQueryOrder);
  exports["refundTicket"] = Napi::Function::New(env, nodeRefundTicket);
  exports["rollback"] = Napi::Function::New(env, nodeRollback);
  exports["clean"] = Napi::Function::New(env, nodeClean);
  exports["exit"] = Napi::Function::New(env, nodeExit);
  return exports;
}

NODE_API_MODULE(NODE_GYP_MODULE_NAME, init)

} // namespace ticket::command
