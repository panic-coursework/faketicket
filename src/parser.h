// This file is autogenerated. Do not modify.
#ifndef TICKET_PARSER_H_
#define TICKET_PARSER_H_

#include <iostream>

#include "datetime.h"
#include "exception.h"
#include "optional.h"
#include "variant.h"
#include "result.h"
#include "response.h"

/// Classes and parsers for commands.
namespace ticket::command {

enum SortType { kTime, kCost };

struct AddUser {
  std::string currentUser;
  std::string username;
  std::string password;
  std::string name;
  std::string email;
  int privilege;
};

struct Login {
  std::string username;
  std::string password;
};

struct Logout {
  std::string username;
};

struct QueryProfile {
  std::string currentUser;
  std::string username;
};

struct ModifyProfile {
  std::string currentUser;
  std::string username;
  Optional<std::string> password;
  Optional<std::string> name;
  Optional<std::string> email;
  Optional<int> privilege;
};

struct AddTrain {
  std::string id;
  int stops;
  int seats;
  Vector<std::string> stations;
  Vector<int> prices;
  Instant departure;
  Vector<Duration> durations;
  Vector<Duration> stopoverTimes;
  Vector<Date> dates;
  char type;
};

struct DeleteTrain {
  std::string id;
};

struct ReleaseTrain {
  std::string id;
};

struct QueryTrain {
  std::string id;
  Date date;
};

struct QueryTicket {
  std::string from;
  std::string to;
  Date date;
  SortType sort = kTime;
};

struct QueryTransfer {
  std::string from;
  std::string to;
  Date date;
  SortType sort = kTime;
};

struct BuyTicket {
  std::string currentUser;
  std::string train;
  Date date;
  int seats;
  std::string from;
  std::string to;
  bool queue = false;
};

struct QueryOrder {
  std::string currentUser;
};

struct RefundTicket {
  std::string currentUser;
  int index = 1;
};

struct Rollback {
  int timestamp;
};

struct Clean {
  
};

struct Exit {
  
};


using Command = Variant<
  AddUser,
  Login,
  Logout,
  QueryProfile,
  ModifyProfile,
  AddTrain,
  DeleteTrain,
  ReleaseTrain,
  QueryTrain,
  QueryTicket,
  QueryTransfer,
  BuyTicket,
  QueryOrder,
  RefundTicket,
  Rollback,
  Clean,
  Exit
>;

/**
 * @brief parses the command stored in str.
 *
 * this function is autogenerated.
 */
auto parse (std::string &str)
  -> Result<Command, ParseException>;
auto parse (const Vector<std::string_view> &argv)
  -> Result<Command, ParseException>;

/**
 * @brief Visitor for the commands.
 *
 * The main function uses this visitor after parsing a
 * command, to actually dispatch it. Overloads of operator()
 * are callbacks of the commands.
 *
 * The implementations are in the corresponding source
 * files, not in parser.cpp.
 */
auto run (const AddUser &cmd) -> Result<Response, Exception>;
auto run (const Login &cmd) -> Result<Response, Exception>;
auto run (const Logout &cmd) -> Result<Response, Exception>;
auto run (const QueryProfile &cmd) -> Result<Response, Exception>;
auto run (const ModifyProfile &cmd) -> Result<Response, Exception>;
auto run (const AddTrain &cmd) -> Result<Response, Exception>;
auto run (const DeleteTrain &cmd) -> Result<Response, Exception>;
auto run (const ReleaseTrain &cmd) -> Result<Response, Exception>;
auto run (const QueryTrain &cmd) -> Result<Response, Exception>;
auto run (const QueryTicket &cmd) -> Result<Response, Exception>;
auto run (const QueryTransfer &cmd) -> Result<Response, Exception>;
auto run (const BuyTicket &cmd) -> Result<Response, Exception>;
auto run (const QueryOrder &cmd) -> Result<Response, Exception>;
auto run (const RefundTicket &cmd) -> Result<Response, Exception>;
auto run (const Rollback &cmd) -> Result<Response, Exception>;
auto run (const Clean &cmd) -> Result<Response, Exception>;
auto run (const Exit &cmd) -> Result<Response, Exception>;

} // namespace ticket::command

#endif // TICKET_PARSER_H_
